{
    "collab_server" : "",
    "contents" : "### TITLE: ARCHAEOCOD ###\n### AUTHORS: Florian Linsel (University of Bamberg), Dr. Georg Roth (Freie Universit√§t Berlin)###\n\n### SYSTEM INFORMATION ###\n### R version 3.6.3 (2021-08-11) ###\n### Platform: x86_64-w64-mingw32/x64 (64-bit) ###\n### Running under: Windows 10 x64 (build 18362) ###\n\n### ATTACHED BASE PACKAGES:\n### [1] stats     graphics  grDevices utils  \n### [6] methods   base\n\nrm(list = ls())\n\n#install.packages(c('Momocs','ggplot2','cowplot','cluster','data.table','stringr','tidyverse','borealis'))\n\nrequire(Momocs)\nrequire(ggplot2)\n\nrequire(cowplot)\nrequire(cluster)\nrequire(data.table)\nrequire(stringr)\nrequire(tidyverse)\nrequire(borealis)\n# install.packages('imager')\n# library(imager)\n\nload_images <- function (x) {\n  \n  invisible( y <- strsplit(x, \"/\"))\n  \n  \n  data_name <- y[[1]][length(y[[1]])]\n  invisible(lf <- list.files(paste(x,'/', data_name,'_outlines/',sep=''), full.names=TRUE, pattern='\\\\jpg$'))\n  \n  invisible(\n    if (exists('lf_total') == TRUE)\n    {\n      invisible(lf_total <<- cbind(c(lf_total,lf)))#,SIMPLIFY=FALSE)\n      #outlines_exp.data <- mapply(rbind,c(outlines_exp,outlinefile),SIMPLIFY=FALSE)\n    }\n    else\n    {\n      invisible(lf_total <<- c(lf))\n      \n    }\n  )\n}\n\nGMM_filt <- function (dir,outlines.data) {\n  \n  ID <- outlines.data['ID']\n  \n  dir_list <- list.dirs(path = dir, full.names = TRUE, recursive = FALSE)\n  \n  a <- lapply(dir_list,load_images)\n  \n  outlines <- invisible(import_jpg(lf_total))\n  \n  lf <- str_split(lf_total,'/')\n  lf <- data.table::transpose (lf)\n  \n  artefact <- c() \n  folder <- c()\n  site <- c()\n  \n  for (i in lf_total){\n    \n    i_2 <-  str_split(i,'/')\n    \n    i_artefact <- i_2[[1]][length(i_2[[1]])]\n    i_folder <- i_2[[1]][length(i_2[[1]])-1]\n    i_site <- i_2[[1]][length(i_2[[1]])-2]\n    artefact <- c(artefact,substr(i_artefact,1,nchar(i_artefact)-4))\n    folder <- c(folder, substr(i_folder,1,nchar(i_folder)))\n    site <- c(site, substr(i_site,1,nchar(i_site)))\n    \n  }\n  \n  # \n  # for (i in lf[7]){\n  #   artefact <- c(artefact,substr(i,1,nchar(i)-4))\n  #   \n  # }\n  # for (i in lf[6]){\n  #   folder <- c(folder, substr(i,1,nchar(i)))\n  # }\n  # \n  # for (i in lf[5]){\n  #   site <- c(site, substr(i,1,nchar(i)))\n  # }\n  \n  filter_list <- as.data.frame(ID)\n  \n  artefact_filt <- artefact[artefact %in% filter_list$ID]\n  folder_filt <- folder[artefact %in% filter_list$ID]\n  site_filt <- site[artefact %in% filter_list$ID]\n  \n  # \n  lf_total_total = c()\n  lf_total_total <- c(paste0(dir,paste(site_filt, folder_filt, artefact_filt, sep=\"/\"),\".jpg\"))\n  \n  # resizing of images\n  #lapply(lf_total_total,resizePixels,512)\n  \n  # image import\n  b <- lapply(lf_total_total,load_images)\n  outlines_filt <- invisible(import_jpg(lf_total_total))\n  \n  return_list <- list(\"outlines_filt\" = outlines_filt, \"outlines.data\" = outlines.data)\n  return (return_list)\n}\n\nresizePixels <- function(my_file,h_size) {\n  \n  #library(imager)\n  library(magick)\n  \n  im <- image_read(paste0(my_file,'.jpg'))\n  w_h_ratio <- width(im)/height(im)\n  print(paste0('x',h_size))\n  \n  thmb <- image_scale(im, geometry = paste0('x',h_size))#paste0('x',h_size))#resize(im,round(h_size*w_h_ratio),round(h_size))\n  \n  thres <- image_level(thmb,black_point = 10,white_point = 10,mid_point = 100,channel = NULL) #threshold(thmb,\"5.7%\") %>% plot(main=\"Determinant: 1% highest values\")\n  \n  image_write(thres,(paste0(my_file,'_res.jpg')))\n}\n\nGMM <- function (dir,outlines_filt,outlines.data_filt,data_metrics) {\n  \n  ###     1. example data and packages\n  \n  outlinefile_filt <- Out(outlines_filt,fac = outlines.data_filt) ### creation of an outline file with the database supplying metadata outlines_2.data\n  \n  png(paste0(dir,\"../png/R/GMM_panel.png\"), width=8333, height=5156, res=1200)\n  panel(outlinefile_filt,fac='site')#, fac = 'widest_part', palette = col_cold) \n  dev.off()\n  \n  png(paste0(dir,\"../png/R/GMM_stack.png\"), width=8333, height=5156, res=1200)\n  stack(outlinefile_filt)\n  dev.off()\n  \n  png(paste0(dir,\"../png/R/GMM_stack.png\"), width=8333, height=5156, res=1200)\n  outlinefile_filt %>% \n    coo_center %>% coo_scale %>%\n    coo_alignxax() %>% coo_slidedirection(\"up\") %>%\n    stack()\n  dev.off()\n  \n  png(paste0(dir,\"../png/R/GMM_calibrate_reconstructions.png\"), width=8333, height=5156, res=1200)\n  outlinefile_filt %>% \n    calibrate_reconstructions_efourier(id=6, range = 1:9)\n  dev.off()\n  \n  efourierfile <- efourier(outlinefile_filt, norm = FALSE)#, nb.h = 10, smooth.it = 0, norm = TRUE, start = FALSE) ### creation of EFA class (10 harmonics); normalisation is suitable in this instance given previous procedures.\n  ### calls the file detailing the created OutCoe object (data and factors)\n  \n  # png(paste0(dir,\"../png/R/GMM_harmonicpower.png\"), width=8333, height=5156, res=1200)\n  # calibrate_harmonicpower(efourierfile)\n  # dev.off()\n  \n  \n  \n  #efourierfile <- efourier(bot, norm = FALSE)\n  efourierfilepca <- PCA(efourierfile)\n  str(efourierfilepca)\n  png(paste0(dir,\"../png/R/GMM_scatter_16.png\"), width=8333, height=5156, res=1200)\n  \n  plot(efourierfilepca$x , pch=16, col=rgb(0,0,1,.4), cex=2)\n  text(efourierfilepca$x, labels=outlines.data_filt$ID, cex= 0.7)\n  dev.off()\n  \n  png(paste0(dir,\"../png/R/GMM_scatter_21.png\"), width=8333, height=5156, res=1200)\n  plot(efourierfilepca$x , pch=21, col=rgb(0,0,1,.4), cex=2,asp=1)\n  dev.off()\n  \n  ## 1.1 ...\n  \n  #   vector <- c(manova.Coe(efourierfile, \"type\"))\n  \n  #   write.csv(vector,paste0('../../png/R/GMM_manova.csv'))\n  \n  ###     2. distance and clustering\n  \n  # a distance matrix (default euclidean distance is correct)\n  \n  distobj <- dist(efourierfilepca$x[,1:10])\n  summary(distobj)\n  \n  # just some ward hierclus\n  \n  cluswardd2 <- hclust(d = distobj, method = \"ward.D2\")\n  \n  print(1)\n  \n  ###     3. silhouette\n  \n  # 'cutting' the dendrogramm (the 'tree') into k clusters\n  \n  clusloesk2 <- cutree(tree = cluswardd2, k=3)\n  \n  # silhouette\n  # requires an integer vector holding cluster ids and a distance matrix\n  \n  sils <- silhouette(x = clusloesk2, dist=distobj)\n  \n  # overall performance is average silhouette width\n  \n  summary(sils)$avg.width\n  \n  ###       4. \"all together now\"\n  \n  # say, we build at minimum 2 and at maximum 10 groups\n  # each time we cut the tree\n  # and apply silhouette\n  \n  ##    4.1. \"for k in two to some\" loop\n  \n  silvec <- rep(0,9) # empty vector for result\n  \n  for (k in 2:10)\n  { clusloeskk  <- cutree(tree = cluswardd2, k=k) # using the wardd2 dendrogr\n  sils        <- silhouette(x = clusloeskk, dist=distobj)\n  silvec[k-1] <- summary(sils)$avg.width }\n  \n  (kopt <- (2:10)[which.max(silvec)]) # how many clusters are silhouette-optimal\n  \n  \n  ##    4.2. visualize optimal silhouette\n  \n  # by barplot\n  png(paste0(dir,\"../png/R/GMM_silhoutte_bar.png\"), width=8333, height=5156, res=1200)\n  barplot(  silvec, col=8, las=1, names.arg = 2:10, ylim=c(0,1), space=0, width=1)\n  points( kopt-1.5, max(silvec)+0.1, pch=25, bg=2,cex=3)\n  text( kopt-1.5, max(silvec)+0.15, round(max(silvec),2),font=3)\n  dev.off()\n  \n  \n  ##    4.3. visualize clusters\n  \n  # in shape space scatter\n  \n  koptcol <- rainbow(kopt) # over the rainbow\n  koptcol <- adjustcolor(koptcol, 0.2) # very transp cols\n  \n  clusloeskopt  <- cutree(tree = cluswardd2, k=kopt) # using the wardd2 dendrogr\n  \n  png(paste0(dir,\"../png/R/GMM_scatter.png\"), units=\"px\", width=8333, height=5156, res=1200)\n  plot(efourierfilepca , pch=\"\", cex=2) # empty shape space\n  #text ()\n  par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)\n  \n  points(efourierfilepca$x , pch=21, bg=koptcol[clusloeskopt], cex=3) # col points\n  # Add legend to top right, outside plot region\n  legend(\"topright\", title=\"Cluster\", c(\"1\",\"2\"),#fill=topo.colors(2), \n         cex=.8, horiz = T , \n         inset = c(0.1, 0.1),fill = koptcol[clusloeskopt])#pch = c(19,19),\n  dev.off()\n  \n  ##    4.3. \n  outlines.data_filt$clust <- clusloeskopt\n  print(outlines.data_filt$clust)\n  \n  outlinefile_filt <- Out(outlines_filt, fac = outlines.data_filt) ### creation of an outline \n  \n  efourierfile <- efourier(outlinefile_filt, nb.h = 10, smooth.it = 0, norm = TRUE, start = TRUE) \n  print(efourierfile)\n  x <- MSHAPES(efourierfile, \"clust\", nb.pts=1200)$shp\n  cluster_1 <- x$'1'\n  cluster_2 <- x$'2'\n  \n  png(paste0(dir,\"../png/R/GMM_clust.png\"), width=8333, height=5156, res=1200)\n  tps_iso(cluster_1, cluster_2,iso.nb=200,cont.col = c(\"darkred\", \"royalblue\"))#, iso.nb=200, amp=3))\n  dev.off()\n  ##    5. Export PCA values\n  \n  scores_pca <- as.data.frame (efourierfilepca$x)\n  scores_pca <- cbind (outlines.data_filt,scores_pca)\n  scores_pca$clust <- clusloeskopt\n  \n  outlines.data_filt$clust <- clusloeskopt\n  \n  write.csv(scores_pca,paste(dir,data_metrics,'_PCA-clust.csv',sep=''))\n  write.csv(outlines.data_filt,paste(dir,data_metrics,'_clust.csv',sep='')) \n  \n  #######################\n  \n  efourierfilepca$clust <- outlines.data_filt$clust\n  png(\"../../png/R/GMM_scatter_1.png\", units=\"px\", width=8333, height=5156, res=1200)#, quality = 100)\n  plot(efourierfilepca, ordered (efourierfilepca$clust,levels=c(1,2)), xax = 1, yax = 2, points = T, cex = 0.5,center.origin = F, grid = TRUE, #xlim = c(-0.002, 0.12), ylim = c(-0.12, 0.135)\n       col = c(\"darkred\", \"royalblue\"), morphospace = T, ellipses = T, conf.ellipses = 0.95, chull = F, chull.filled = F,\n       chull.filled.alpha = 0.92, eigen = FALSE, rug = FALSE, title = \"\",\n       labelsgroups=TRUE, cex.labelsgroups=1.15, rect.labelsgroups = FALSE, color.legend = T, old.par = F, nb.grids = 1)\n  \n  par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)\n  dev.off()\n  \n  ###################################################\n  \n  png(\"../../png/R/GMM_kmeans.png\", units=\"px\", width=8333, height=5156, res=1200)#, quality = 100)\n  KMEANS(efourierfilepca, centers = 2)\n  \n  par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)\n  dev.off()\n  \n  return (efourierfilepca)\n}\n\nGMM_procedure <- function (dir,data_metrics){\n  \n  \n  outlines.data <- read.csv(paste0(dir,data_metrics,'.csv'), header = T, sep=\",\",encoding =\"UTF-8\")\n  GMM_prep_return <- GMM_filt (dir,outlines.data)\n  \n  outlines_filt <- GMM_prep_return$outlines_filt\n  outlines.data <- GMM_prep_return$outlines.data\n  \n  outlines.data$X <- NULL\n  \n  data <- GMM (dir,outlines_filt,outlines.data,data_metrics)\n  return (outlines.data)\n}\n\nGMM_RDA <- function (dir,outlines_filt,outlines.data_filt,data_metrics){\n  ###     1. example data and packages\n  \n  outlinefile_filt <- Out(outlines_filt)#, fac = outlines.data) ### creation of an outline file with the database supplying metadata outlines_2.data\n  #panel(outlinefile)#, fac = 'widest_part', palette = col_cold) \n  \n  efourierfile <- efourier(outlinefile_filt,nb.h = 10, smooth.it = 0, norm = FALSE)#, nb.h = 10, smooth.it = 0, norm = TRUE, start = FALSE) ### creation of EFA class (10 harmonics); normalisation is suitable in this instance given previous procedures.\n  ### calls the file detailing the created OutCoe object (data and factors)\n  \n  #efourierfile <- efourier(bot, norm = FALSE)\n  efourierfilepca <- PCA(efourierfile, fac = outlines.data_filt)\n  \n  \n  distobj <- dist(outlines.data_filt[,c('RDA.RDA1','RDA.PC1')]) #outlinefile_filt\n  summary(distobj)\n  \n  # just some ward hierclus\n  \n  cluswardd2 <- hclust(d = distobj, method = \"ward.D2\")\n  \n  print(1)\n  \n  ###     3. silhouette\n  \n  # 'cutting' the dendrogramm (the 'tree') into k clusters\n  \n  clusloesk2 <- cutree(tree = cluswardd2, k=3)\n  \n  # silhouette\n  # requires an integer vector holding cluster ids and a distance matrix\n  \n  sils <- silhouette(x = clusloesk2, dist=distobj)\n  \n  # overall performance is average silhouette width\n  \n  summary(sils)$avg.width\n  \n  ###       4. \"all together now\"\n  \n  # say, we build at minimum 2 and at maximum 10 groups\n  # each time we cut the tree\n  # and apply silhouette\n  \n  ##    4.1. \"for k in two to some\" loop\n  \n  silvec <- rep(0,9) # empty vector for result\n  \n  for (k in 2:10)\n  { clusloeskk  <- cutree(tree = cluswardd2, k=k) # using the wardd2 dendrogr\n  sils        <- silhouette(x = clusloeskk, dist=distobj)\n  silvec[k-1] <- summary(sils)$avg.width }\n  \n  (kopt <- (2:10)[which.max(silvec)]) # how many clusters are silhouette-optimal\n  \n  ##    4.2. visualize optimal silhouette\n  \n  # by barplot\n  png(paste0(dir,\"../png/R/GMM_silhoutte_bar_RDA.png\"), width=8333, height=5156, res=1200)\n  barplot(  silvec, col=8, las=1, names.arg = 2:10, ylim=c(0,1), space=0, width=1)\n  points( kopt-1.5, max(silvec)+0.1, pch=25, bg=2,cex=3)\n  text( kopt-1.5, max(silvec)+0.15, round(max(silvec),2),font=3)\n  dev.off()\n  \n  \n  ##    4.3. visualize clusters\n  \n  # in shape space scatter\n  \n  koptcol <- rainbow(kopt) # over the rainbow\n  koptcol <- adjustcolor(koptcol, 0.2) # very transp cols\n  \n  clusloeskopt  <- cutree(tree = cluswardd2, k=kopt) # using the wardd2 dendrogr\n  \n  efourierfilepca$rda_clust <- clusloeskopt\n  \n  print(efourierfilepca$rda_clust)\n  \n  png(\"../../png/R/GMM_scatter_rda.png\", units=\"px\", width=8333, height=5156, res=1200)#, quality = 100)\n  plot(efourierfilepca, ordered (efourierfilepca$rda_clust,levels=c(1,2)), xax = 1, yax = 2, points = T, cex = 0.5,center.origin = F, grid = TRUE, #xlim = c(-0.002, 0.12), ylim = c(-0.12, 0.135)\n       col = c(\"darkred\", \"royalblue\"), morphospace = T, ellipses = T, conf.ellipses = 0.95, chull = F, chull.filled = F,\n       chull.filled.alpha = 0.92, eigen = FALSE, rug = FALSE, title = \"\",\n       labelsgroups=TRUE, cex.labelsgroups=1.15, rect.labelsgroups = FALSE, color.legend = T, old.par = F, nb.grids = 1)\n  \n  dev.off()\n  \n  #########################\n  # Mean shape RDA\n  \n  outlines.data_filt$rda_clust <- clusloeskopt\n  \n  outlinefile_filt <- Out(outlines_filt, fac = outlines.data_filt) ### creation of an outline \n  \n  efourierfile <- efourier(outlinefile_filt, nb.h = 10, smooth.it = 0, norm = TRUE, start = TRUE) \n  \n  x <- MSHAPES(efourierfile, \"rda_clust\", nb.pts=1200)$shp\n  cluster_1 <- x$'1'\n  cluster_2 <- x$'2'\n  \n  png(paste0(dir,\"../png/R/GMM_RDA_clust.png\"), width=8333, height=5156, res=1200)\n  tps_iso(cluster_1, cluster_2,iso.nb=200,cont.col = c(\"darkred\", \"royalblue\"))#, iso.nb=200, amp=3))\n  dev.off()\n  \n  write.csv(outlines.data_filt,paste0(dir,data_metrics,'_rdaclust.csv'))\n  \n}\n\nGMM_RDA_procedure <- function (dir,data_metrics,filter_list){\n  print(paste0(dir,data_metrics,'.csv'))\n  \n  outlines.data <- read.csv(paste0(dir,data_metrics,'.csv'), header = T, sep=\",\",encoding =\"UTF-8\")\n  #print(outlines.data[,-filter_list])\n  \n  GMM_prep_return <- GMM_filt (dir,outlines.data)\n  # #\n  outlines_filt <- GMM_prep_return$outlines_filt\n  outlines.data <- GMM_prep_return$outlines.data\n  outlines.data <- outlines.data[ ,which(!(names(outlines.data) %in% filter_list)==TRUE)]\n  #\n  data <- GMM_RDA (dir,outlines_filt,outlines.data,data_metrics)\n  return (outlines.data)\n}\n\n",
    "created" : 1660291455214.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2921085557",
    "id" : "383E2D6E",
    "lastKnownWriteTime" : 1660297051,
    "last_content_update" : 1660297053692,
    "path" : "~/Documents/Projekt/ArchaeoCod_Linsel/code/R/GMM_functions.R",
    "project_path" : "GMM_functions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}