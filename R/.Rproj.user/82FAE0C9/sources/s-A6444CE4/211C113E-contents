
###     1. example data and packages

require(cluster)

require(Momocs)

data(bot)

botef <- efourier(bot, norm = FALSE)
botefpca <- PCA(botef)
plot(botefpca , pch=16, col=rgb(0,0,1,.4), cex=2)

file_path <- 'C:/Users/ba4ac3/Work Folders/Documents/GitHub/ArchaeoCod_Linsel/project/Willendorf9_01/Willendorf9_01_outlines'

file_list <- list.files(file_path,pattern = ".jpg", recursive = TRUE)
setwd(file_path)
outlines <- lapply (file_list,import_jpg)


outlinefile_filt <- Out(outlines)#, fac = outlines.data) ### creation of an outline file with the database supplying metadata outlines_2.data
#panel(outlinefile)#, fac = 'widest_part', palette = col_cold) 

efourierfile <- efourier(outlinefile_filt)#, nb.h = 10, smooth.it = 0, norm = TRUE, start = FALSE) ### creation of EFA class (10 harmonics); normalisation is suitable in this instance given previous procedures.
### calls the file detailing the created OutCoe object (data and factors)

#efourierfile <- efourier(bot, norm = FALSE)
efourierfilepca <- PCA(efourierfile)



plot(botefpca$x , pch=21, col=rgb(0,0,1,.4), cex=2,asp=1)


###     2. distance and clustering

# a distance matrix (default euclidean distance is correct)

distobj <- dist(botefpca$x)
summary(distobj)

# just some ward hierclus

cluswardd2 <- hclust(d = distobj, method = "ward.D2")



###     3. silhouette

# 'cutting' the dendrogramm (the 'tree') into k clusters

clusloesk2 <- cutree(tree = cluswardd2, k=2)

# silhouette
# requires an integer vector holding cluster ids and a distance matrix

sils <- silhouette(x = clusloesk2, dist=distobj)

# overall performance is average silhouette width

summary(sils)$avg.width



###       4. "all together now"

# say, we build at minimum 2 and at maximum 10 groups
# each time we cut the tree
# and apply silhouette

##    4.1. "for k in two to some" loop

silvec <- rep(0,9) # empty vector for result

for (k in 2:10)
{ clusloeskk  <- cutree(tree = cluswardd2, k=k) # using the wardd2 dendrogr
  sils        <- silhouette(x = clusloeskk, dist=distobj)
  silvec[k-1] <- summary(sils)$avg.width }

(kopt <- (2:10)[which.max(silvec)]) # how many clusters are silhouette-optimal


##    4.2. visualize optimal silhouette

# by barplot

barplot(  silvec, col=8, las=1, names.arg = 2:10, ylim=c(0,1), space=0, width=1)
points( kopt-1.5, max(silvec)+0.1, pch=25, bg=2,cex=3)
text( kopt-1.5, max(silvec)+0.15, round(max(silvec),2),font=3)


##    4.3. visualize clusters

# in shape space scatter

koptcol <- rainbow(kopt) # over the rainbow
koptcol <- adjustcolor(koptcol, 0.2) # very transp cols

clusloeskopt  <- cutree(tree = cluswardd2, k=kopt) # using the wardd2 dendrogr

plot(botefpca , pch="", cex=2) # empty shape space
points(botefpca$x , pch=21, bg=koptcol[clusloeskopt], cex=2) # col points


