# Hallo Georg, ich habe mich an Christian's Code bedient und diesen ein wenig verändert, 
# sodass gane Verzeichnisse ausgelesen und kombiniert werden können. 

### COLOGNE WORKSHOP: GEOMETRIC MORPHOMETRICS FOR ARCHAEOLOGISTS ###
### AUTHOR: Dr. Christian Steven Hoggard (University of Southampton) ###
### ALTERATION: Florian Linsel (University of Bamberg)###

### SYSTEM INFORMATION ###
### R version 3.6.3 (2021-08-11) ###
### Platform: x86_64-w64-mingw32/x64 (64-bit) ###
### Running under: Windows 10 x64 (build 18362) ###

### ATTACHED BASE PACKAGES:
### [1] stats     graphics  grDevices utils  
### [6] methods   base


library(Momocs)
library(tidyverse)
#library(cowplot)

## Function for extracting filenames  

load_images <- function (x) {
  
  
  
  invisible( y <- strsplit(x, "/"))
  
  invisible(lf <- list.files(paste(x,'/', y[[1]][5],'_outlines/',sep=''), full.names=TRUE, pattern='\\jpg$'))
  
  invisible(
    if (exists('lf_total') == TRUE)
    {
      invisible(lf_total <<- cbind(c(lf_total,lf)))#,SIMPLIFY=FALSE)
      #outlines_exp.data <- mapply(rbind,c(outlines_exp,outlinefile),SIMPLIFY=FALSE)
    }
    else
    {
      invisible(lf_total <<- c(lf))
      
    }
  )
}

## Import outlines and data 

dir = '../../Linsel_Data/'
dir_list <- list.dirs(path = dir, full.names = TRUE, recursive = FALSE)

lf_total = c()
a <- lapply(dir_list,load_images)


outlines <- invisible(import_jpg(lf_total))
invisible(outlines.data <- read.csv(paste(dir,'data_metrics_last.csv',sep=''), header = T, sep=",",row.names = 2))


outlines.data <- outlines.data[rownames(outlines.data) != 'KremsWachtberg_01_10',]
outlines <- outlines[rownames(outlines.data) != 'KremsWachtberg_01_10']

outlines.data <- outlines.data[outlines.data$class != 0,]
outlines <- outlines[outlines.data$class != 0]

outlinefile <- Out(outlines)#, fac = outlines.data) ### creation of an outline file with the database supplying metadata outlines_2.data


### How many harmonics are needed for describing 99% of the variance

calibrate_harmonicpower_efourier(outlinefile)$minh # minimum harmonics

#calibrate_harmonicpower_efourier(outlinefile) ### confirm how many harmonics equate to 99.9% harmonic power (may take some time!)
calibrate_reconstructions_efourier(outlinefile, range=1:20) ### confirm through reconstruction (of a random example)
calibrate_deviations_efourier(outlinefile) ### confirm through analysis of centroid deviations
outline$fac

efourierfile <- efourier(outlinefile, nb.h = 10, smooth.it = 0, norm = TRUE, start = FALSE) ### creation of EFA class (10 harmonics); normalisation is suitable in this instance given previous procedures.
### calls the file detailing the created OutCoe object (data and factors)

pca1 <- PCA(efourierfile, scale. = FALSE, center = TRUE, fac = Database) ### creation of PCA class
#print(pca1$x)
scores <- data.frame(pca1$x) ### creation of scores into a dataframe
scores <- scores[match(rownames(outlines.data),rownames(scores)),] ### match to row ID on database
outlines.data <- cbind(outlines.data, scores) ### column bind to database
### removes scores (no longer necessary)
#View(outlines.data)


# Cluster analysis and plotting

library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization

#k_nmb <- round(sqrt(length(row.names(scores))))
k_nmb <- 5

scores_red <- scores[,1:10]

k5 <- kmeans(scores_red, centers = k_nmb, nstart = 1)
scores_red$cluster <- as.character(k5$cluster)
scores_red$name <- row.names(scores_red)
scores_red$ka_cal_BP   <- outlines.data$ka_cal_BP

scores_red$ka_cal_BP <- factor(scores_red$ka_cal_BP)

## plotting of cluster
ggplot(data = scores_red, 
       mapping = aes(x = PC1, 
                     y = PC2, 
                     colour = cluster,
                     label = name,
                     shape = as.character(ka_cal_BP))) +
  geom_point() +
  scale_shape_manual(values=1:nlevels(scores_red$ka_cal_BP))

ggsave("png/cluster_scatter_dated.png")
dev.off()



ggplot(data = scores_red, 
       mapping = aes(x = PC1, 
                     y = PC2, 
                     colour = cluster,
                     label = name)) +
  geom_point() +
  geom_text ()

ggsave("png/cluster_scatter_labeled.png")
dev.off()

table(scores_red$cluster)

write.csv(scores_red,paste(dir,'data_metrics_RDA.csv',sep=''), row.names = TRUE) 
